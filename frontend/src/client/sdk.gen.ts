// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { MutateAddData, MutateAddResponse, MutateAddError, GetOpenapiData, GetOpenapiResponse, GetOpenapiError, QueryAccountBalancesData, QueryAccountBalancesResponse, QueryAccountBalancesError, QueryAccountIncomeStatementData, QueryAccountIncomeStatementResponse, QueryAccountIncomeStatementError, QueryAccountNamesAllData, QueryAccountNamesAllResponse, QueryAccountNamesAllError, QueryAccountTransactionsData, QueryAccountTransactionsResponse, QueryAccountTransactionsError, QueryCommoditiesAllData, QueryCommoditiesAllResponse, QueryCommoditiesAllError, QueryPrepareAddFcfsData, QueryPrepareAddFcfsResponse, QueryPrepareAddFcfsError, GetVersionData, GetVersionResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const mutateAdd = <ThrowOnError extends boolean = false>(options: Options<MutateAddData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MutateAddResponse, MutateAddError, ThrowOnError>({
        url: '/mutate/add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getOpenapi = <ThrowOnError extends boolean = false>(options?: Options<GetOpenapiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOpenapiResponse, GetOpenapiError, ThrowOnError>({
        url: '/openapi',
        ...options
    });
};

export const queryAccountBalances = <ThrowOnError extends boolean = false>(options: Options<QueryAccountBalancesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryAccountBalancesResponse, QueryAccountBalancesError, ThrowOnError>({
        url: '/query/account-balances',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const queryAccountIncomeStatement = <ThrowOnError extends boolean = false>(options: Options<QueryAccountIncomeStatementData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryAccountIncomeStatementResponse, QueryAccountIncomeStatementError, ThrowOnError>({
        url: '/query/account-income-statements',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const queryAccountNamesAll = <ThrowOnError extends boolean = false>(options?: Options<QueryAccountNamesAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<QueryAccountNamesAllResponse, QueryAccountNamesAllError, ThrowOnError>({
        url: '/query/account-names-all',
        ...options
    });
};

export const queryAccountTransactions = <ThrowOnError extends boolean = false>(options: Options<QueryAccountTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryAccountTransactionsResponse, QueryAccountTransactionsError, ThrowOnError>({
        url: '/query/account-transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const queryCommoditiesAll = <ThrowOnError extends boolean = false>(options?: Options<QueryCommoditiesAllData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<QueryCommoditiesAllResponse, QueryCommoditiesAllError, ThrowOnError>({
        url: '/query/commodities-all',
        ...options
    });
};

export const queryPrepareAddFcfs = <ThrowOnError extends boolean = false>(options: Options<QueryPrepareAddFcfsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<QueryPrepareAddFcfsResponse, QueryPrepareAddFcfsError, ThrowOnError>({
        url: '/query/prepare-add',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getVersion = <ThrowOnError extends boolean = false>(options?: Options<GetVersionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVersionResponse, unknown, ThrowOnError>({
        url: '/version',
        ...options
    });
};